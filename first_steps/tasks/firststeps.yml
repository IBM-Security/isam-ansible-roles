---
# task file for ISAM appliance first steps
#
#     accept service agreements
#     set up LMI FIPS
#     restart LMI
#     change password
#
# accept service agreements
- name: Accept Service Agreements
  isam:
    appliance: "{{inventory_hostname}}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.service_agreement.set
  notify: 
    - Await Appliance Commit LMI Response
    
- meta: flush_handlers

- name: Get Last Boot Timestamp
  isam:
    appliance: "{{inventory_hostname}}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.firmware.get
  check_mode: no
  register: ret_obj

- name: Extract Last Boot Timestamp
  set_fact:
    last_boot: "{{ret_obj.data[0].last_boot}}"

# set up LMI FIPS
- name: Setup FIPS Mode
  isam:
    appliance: "{{inventory_hostname}}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.fips.set
    isamapi:
      fipsEnabled: "{{FIPS_cfg.fipsEnabled}}"
      tlsv10Enabled: "{{FIPS_cfg.tlsv10Enabled}}"
      tlsv11Enabled: "{{FIPS_cfg.tlsv11Enabled}}"
  register: ret_obj
  when: first_steps_fips
  notify: 
    - Await Appliance Commit LMI Response

# make sure we wait for the LMI restart
- meta: flush_handlers

# Restart after FIPS if needed
- name: Restart after enabling FIPS
  isam:
      appliance: "{{inventory_hostname}}"
      username: admin
      password: admin
      action: ibmsecurity.isam.base.fips.restart
  register: ret_obj
  when: first_steps_fips and ret_obj.data.reboot is defined and ret_obj.data.reboot == true
  notify: 
    - Await Appliance Commit LMI Response

- meta: flush_handlers

# Make sure system restarted
- name: Check FIPS settings for System Online Status
  isam:
    appliance: "{{inventory_hostname}}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.firmware.get
  register: result
  retries: 5
  delay: 30
  ignore_errors: true
  until: result.rc == 0 and (result.data[0].last_boot != last_boot)
  when: first_steps_fips and ret_obj.data.reboot is defined and ret_obj.data.reboot == true

# Complete the appliance set up
- name: Complete Appliance Setup
  isam:
    appliance: "{{inventory_hostname}}"
    username: admin
    password: admin
    action: ibmsecurity.isam.base.setup_complete.set
  register: result
  retries: 5
  delay: 30
  ignore_errors: true
  until: result.stdout is defined and result.stdout.find("Setup complete") != -1

# Change password
- name: Change password for admin user
  isam: 
      appliance: "{{inventory_hostname}}"
      password: "admin"
      action: ibmsecurity.isam.base.admin.set_pw
      isamapi:
          'oldPassword': 'admin'
          'newPassword': "{{password}}"
          'sessionTimeout': "{{lmi_session_timeout}}"
  when: first_steps_admin_pwd
  notify: Commit And Restart

- name: Get LMI Last Restart Timestamp
  isam:
    appliance: "{{ inventory_hostname }}"
    username:  "{{ username }}"
    password:  "{{ password }}"
    lmi_port:  "{{ lmi_port }}"
    log:       "{{ log_level }}"
    force:     "{{ force }}"
    action: ibmsecurity.isam.base.lmi.get
  check_mode: no
  register: ret_obj

- name: Extract LMI Restart Timestamp
  set_fact:
    old_start_time: "{{ret_obj.data[0].start_time}}"
  when: not ansible_check_mode

- name: Commit Changes and Restart LMI
  isam:
    appliance: "{{ inventory_hostname }}"
    username:  "{{ username }}"
    password:  "{{ password }}"
    lmi_port:  "{{ lmi_port }}"
    log:       "{{ log_level }}"
    force:     "{{ force }}"
    action: ibmsecurity.isam.appliance.commit_and_restart
  when: not ansible_check_mode

- name: Wait for 1 minute
  pause:
      minutes: 1
  when: not ansible_check_mode

- name: Wait for LMI to Respond
  isam:
    appliance: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    lmi_port:  "{{ lmi_port }}"
    log:       "{{ log_level }}"
    force:     "{{ force }}"
    action: ibmsecurity.isam.base.lmi.await_startup
    isamapi:
      start_time: "{{old_start_time}}"
      wait_time: "{{start_config_wait_time}}"
  retries: 5
  delay: 30
  ignore_errors: true
  when: not ansible_check_mode

- name: Fail Appliance if Running in Check Mode
  fail:
    msg: Appliance does not have First Steps Executed. No task will run successfully so failing.
  when: ansible_check_mode