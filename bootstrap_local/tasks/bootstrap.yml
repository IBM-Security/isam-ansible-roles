---
# subtask file for isam-local-bootstrap
- name: Check the ISAM ISO file exists
  stat: path={{ BS_appliance_iso }}
  register: isofile
  failed_when: "isofile.stat.exists == false"
- debug: var=isofile.stat.exists

- name: Check if the target VM directory exists
  stat: path={{ BS_vm_path_root }}/{{ BS_vm_hostname }}{{ BS_vm_dir_suffix }}
  register: vmdir
  ignore_errors: true

- name: delete if the target VM directory exists
  file: path="{{ BS_vm_dest_dir }}" state=absent
  when: vmdir.stat.exists == true

- name: create target VM directory
  file: path="{{ BS_vm_dest_dir }}" state=directory mode=0755
  register: shell_out
- debug: var=shell_out

- name: copy vmx file to target VM directory
  template: src="{{ role_path }}/templates/isam9_sample.vmx" dest="{{ BS_vm_vmx }}"
  register: cmd_out
- debug: var=cmd_out

- name: create VM disk
  shell: "{{ BS_vmdiskmgr }} -c -a lsilogic -s {{ BS_vm_hdd_size }}GB -t 0 {{ BS_vm_vmdk }}"
  register: cmd_out
- debug: var=cmd_out

- name: install ISAM ISO from image {{ BS_appliance_iso }}
  shell: "{{ BS_vmrun }} {{ BS_vmrunflags }} start {{ BS_vm_vmx }}"
  register: shell_out
- debug: var=shell_out

- name: waiting for VM to install isam image and shutdown
  shell: while ( {{ BS_vmrun }} {{ BS_vmrunflags }} list | grep -q {{ BS_vm_vmx }} );
         do
           echo -n . ;
           sleep 1;
         done
  register: shell_out

- name: wait for VM process to end
  shell: while ( ps -ef | grep {{ BS_vm_vmx }} | grep -q -v grep );
         do
           echo -n . ;
           sleep 1;
         done
  register: shell_out

- name: check tmp dir
  stat: path="{{BS_tmpdir}}/{{ BS_vm_hostname }}-metadata"
  register: tmpdir
  ignore_errors: true

- name: clean tmp dir and file
  file: path="{{BS_tmpdir}}/{{ BS_vm_hostname }}-metadata" state=absent
        path="{{BS_tmpdir}}/{{ BS_vm_hostname }}-metadata.iso" state=absent
  when: tmpdir.stat.exists == true

- name: create tmp dir
  file: path="{{BS_tmpdir}}/{{ BS_vm_hostname }}-metadata" state=directory mode=0755
  register: shell_out
- debug: var=shell_out

- name: copy template
  template: src="{{ role_path }}/templates/app-metadata" dest="{{BS_tmpdir}}/{{ BS_vm_hostname }}-metadata"
  register: cmd_out
- debug: var=cmd_out

- name: create metadata ISO
  shell: "{{ BS_mkisofs }} {{ BS_mkisoflags }} {{BS_tmpdir}}/{{ BS_vm_hostname }}-metadata.iso {{BS_tmpdir}}/{{ BS_vm_hostname }}-metadata  >/dev/null 2>&1"
  register: shell_out
- debug: var=shell_out

- name: replace the ISO image file entry in vmx
  lineinfile: dest={{ BS_vm_vmx }}
              regexp='^sata0:1.fileName'
              line='sata0:1.fileName="{{BS_tmpdir}}/{{ BS_vm_hostname }}-metadata.iso"'
              backrefs=yes
  register: cmd_out
- debug: var=cmd_out

- name: boot up again with bootstrap ISO
  shell: "{{ BS_vmrun }} {{ BS_vmrunflags }} start {{ BS_vm_vmx }}"
  register: shell_out
- debug: var=shell_out

- name: wait for LMI up
  shell: 'curl -k -v -silent -u "admin:admin" -H "Accept:application/json" https://"{{ BS_vm_mgmt_ip }}"'
  register: result
  until: result.stdout.find("302 Found") != -1
  retries: 50
  delay: 5

- name: take care of vmx file to remove ISO image
  lineinfile: dest={{ BS_vm_vmx }}
              regexp='^sata0:1.present'
              line='sata0:1.present="FALSE"'
              backrefs=yes
  register: cmd_out
- debug: var=cmd_out

- name: take care of vmx file to remove ISO image
  lineinfile: dest={{ BS_vm_vmx }}
              regexp='^sata0:1.fileName'
              line='sata0:1.fileName='
              backrefs=yes
  register: cmd_out
- debug: var=cmd_out

- name: take care of vmx file to remove ISO image
  lineinfile: dest={{ BS_vm_vmx }}
              regexp='^sata0:1.startConnected'
              line='sata0:1.startConnected=FALSE'
              backrefs=yes
  register: cmd_out
- debug: var=cmd_out

- name: take a snapshot as baseline
  shell: "{{ BS_vmrun }} {{ BS_vmrunflags }} snapshot {{ BS_vm_vmx }} baseline"
  when: '{{ BS_baseline_snapshot }} == True'
  register: shell_out 
- debug: var=shell_out
